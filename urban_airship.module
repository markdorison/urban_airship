<?php

/**
 * @file
 * Uses FAPI to build the Urban Airship submission page.
 * Written by Mark W. Jarrell (attheshow).
 */

/**
 * Implements hook_menu().
 */
function urban_airship_menu() {
  $items['admin/config/system/ua'] = array(
    'title' => 'Urban Airship',
    'description' => 'Configure how messages are sent by the site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('urban_airship_admin_form'),
    'type' => MENU_NORMAL_ITEM,  
    'access arguments' => array('configure push notifications'),
  );
  $items['admin/ua'] = array(
    'title' => 'Send Push Notification',
    'description' => 'Send a message to students through the app.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('urban_airship_form'),
    'type' => MENU_NORMAL_ITEM,  
    'access arguments' => array('send push notifications'),
  );
  $items['admin/ua/sent'] = array(
    'title' => 'Push Notification Sent',
    'page callback' => 'urban_airship_sent',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function urban_airship_permission() {
  return array(
    'configure push notifications' => array(
      'title' => t('Configure the site for push messages to Urban Airship'),
      'description' => t('Allow users to configure push notifications.'),
    ),
    'send push notifications' => array(
      'title' => t('Send push messages to Urban Airship'),
      'description' => t('Allow users to send push notifications.'),
    ),
  );
}

/**
 * Implements hook_form().
 */
function urban_airship_form($form, &$form_state) {
  // Wrapper div that goes around the entire form.
  $form['#prefix'] = '<div class="fapi-form">';
  $form['#suffix'] = '</div>';

  // Get the config vars.
  $urban_airship_url = variable_get('urban_airship_url');
  $urban_airship_app_key = variable_get('urban_airship_app_key');
  $urban_airship_app_master_secret = variable_get('urban_airship_app_master_secret');
  $urban_airship_default_sound = variable_get('urban_airship_default_sound');
  $urban_airship_default_badge = variable_get('urban_airship_default_badge');

  // Make sure we have all the vars we need.
  if (!empty($urban_airship_url) && !empty($urban_airship_app_key) && !empty($urban_airship_app_master_secret)) {
    // Build the form.
    $form['overview'] = array(
      '#type' => 'markup',
      '#markup' => t('<p>Use the form below to send a message to all users who have the app installed on their mobile devices.</p>'),
    );
    $form['notification'] = array(
      '#type' => 'textarea',
      '#title' => t('Notification'),
      '#required' => TRUE,
      '#maxlength' => 157,
      '#maxlength_js' => TRUE,
    );
    $form['sound'] = array(
     '#type' => 'checkbox',
     '#title' => t('Play default sound.'),
     '#default_value' => $urban_airship_default_sound,
    );
    $form['badge'] = array(
      '#type' => 'checkbox',
      '#title' => t('Increment app badge.'),
      '#default_value' => $urban_airship_default_badge,
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Send',
    );
  }
  else {
    drupal_set_message(t('Configuration variables are not set. Please go to <a href="/admin/config/system/ua">the configuration form</a> and correct this before attempting to send messages.'), 'error');
  }
  return $form;
}

/**
 * Submit handler for form button.
 */
function urban_airship_form_submit($form, &$form_state) {
  // Grab the message. Don't run check_plain or else characters get messed up. drupal_write_record below cleans it for us.
  $notification = $form_state['values']['notification'];

  // Get the config vars.
  $urban_airship_url = variable_get('urban_airship_url');
  $urban_airship_app_key = variable_get('urban_airship_app_key');
  $urban_airship_app_master_secret = variable_get('urban_airship_app_master_secret');

  // Send the message to UrbanAirship.com using curl and JSON.
  // Build the JSON data.
  $json_data = array('aps' => array('alert' => $notification));
  if ($form_state['values']['sound']) {
    $json_data['aps']['sound'] = 'default';
  }
  if ($form_state['values']['badge']) {
    $json_data['aps']['badge'] = 1;
  }
  // Note: (object) Forces it to be an object instead of an array. Works for PHP 5.2.
  $json_encoded_data = json_encode((object)$json_data);

  // Send it using curl!
  $c = curl_init($urban_airship_url);
  curl_setopt($c, CURLOPT_USERPWD, $urban_airship_app_key . ":" . $urban_airship_app_master_secret);
  curl_setopt($c, CURLOPT_POST, TRUE);
  curl_setopt($c, CURLOPT_POSTFIELDS, $json_encoded_data);
  curl_setopt($c, CURLOPT_HEADER, FALSE);
  curl_setopt($c, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($c, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
  curl_exec($c);
  // Check if any error occured
  $response = curl_getinfo($c);
  if ($response['http_code'] != 200) {
    $ua_response = "Got negative response from server, http code: " . $response['http_code'];
  }
  else {
    $ua_response = "Success.";
  }
  curl_close($c);

  // Add the record to our table.
  $table = 'urban_airship_push_notification';
  $record = new stdClass();
  $record->notification = $notification;
  $record->created = REQUEST_TIME;
  drupal_write_record($table, $record);
  // The ID, $record->id, was set by drupal_write_record() since $record is passed by reference.
  watchdog('urban_airship', 'Sent notification with id %id. Response was: %response', array('%id' => $record->id, '%response' => $ua_response));

  if (strstr($ua_response, 'Success.')) {
    drupal_set_message(t('Successfully sent the notification to the Urban Airship site.'));
  }
  else {
    drupal_set_message(t('Sent the notification to the Urban Airship site. The response from them was: %ua_response', array('%ua_response' => $ua_response)), 'error');
  }
  $form_state['redirect'] = 'admin/ua/sent';
}

/**
 * Page callback to show the success of the message.
 */
function urban_airship_sent() {
  return t('<a href="/admin/ua">Go back to send another notification?</a>');
}

/**
 * Admin form.
 */
function urban_airship_admin_form($form, &$form_state) {
  // Wrapper div that goes around the entire form.
  $form['#prefix'] = '<div class="fapi-form">';
  $form['#suffix'] = '</div>';

  // ! Step 1 - Send notification
  $form['overview'] = array(
    '#type' => 'markup',
    '#markup' => t('<p>Use the form below to configure how messages are sent to the Urban Airship site.</p>')
  );
  $form['urban_airship_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Broadcast URL'),
    '#required' => TRUE,
    '#default_value' => variable_get('urban_airship_url', 'https://go.urbanairship.com/api/push/broadcast/'),
  );
  $form['urban_airship_app_key'] = array(
    '#type' => 'textfield',
    '#title' => t('App Key'),
    '#required' => TRUE,
    '#default_value' => variable_get('urban_airship_app_key', ''),
  );
  $form['urban_airship_app_master_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('App Master Secret'),
    '#required' => TRUE,
    '#default_value' => variable_get('urban_airship_app_master_secret', ''),
  );
  $form['defaults'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default notification settings'),
    '#description' => t('These settings represent the default state when sending a push notification. They can be overridden for individual messages.'),
    '#collapsible' => FALSE,
  );
  $form['defaults']['urban_airship_default_sound'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate notification sound.'),
    '#default_value' => variable_get('urban_airship_default_sound', 0),
  );
  $form['defaults']['urban_airship_default_badge'] = array(
    '#type' => 'checkbox',
    '#title' => t('Increment app badge number.'),
    '#default_value' => variable_get('urban_airship_default_badge', 0),
  );
  $form = system_settings_form($form);
  return $form;
}

/**
 * Implements hook_views_api().
 */
function urban_airship_views_api() {
  return array(
    'api' => '3.0-alpha1',
  );
}

/**
 * Implements hook_entity_info().
 *
 * The "urban_airship_push_notification" table hasn't been defined as a entity in Drupal 7
 * so we need to wrap around to have it candidate for VBO.
 */
function urban_airship_entity_info() {
  return array(
    'urban_airship_push_notification' => array(
      'label' => t('Urban Airship Entity'),
      'base table' => 'urban_airship_push_notification',
      'entity keys' => array(
        'id' => 'id',
      ),
      'label callback' => 'urban_airship_label',
    ),
  );
}

/**
 * Label callback for "urban_airship_push_notification" entity.
 */
function urban_airship_label($item) {
  return '#' . $item->id . ' [' . $item->notification . ']';
}

/**
 * Implements hook_action_info().
 */
function urban_airship_action_info() {
  return array(
    'urban_airship_item_delete_action' => array(
      'type' => 'entity',
      'label' => t('Delete Urban Airship push notification(s)'),
      'configurable' => FALSE,
    ),
  );
}

/**
 * Action callback for "urban_airship_item_delete_action" action.
 */
function urban_airship_item_delete_action($entity, $context) {
  $info = entity_get_info($context['entity_type']);
  $entity_id = $entity->{$info['entity keys']['id']};

  // Delete those rows from our custom table
  $num_deleted = db_delete('urban_airship_push_notification')
  ->condition('id', $entity_id)
  ->execute();
}
